<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">
<html><head>
<meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
<title>Using padding in encryption</title>

<meta name="description" content="Using padding in encryption">
<meta name="keywords" content="Cryptography, techniques, padding, cryptography code, Blowfish, DES, AES, Triple DES, random padding">
<meta name="copyright" content="Copyright (C) 2003-10 DI Management Services Pty Limited ABN 78 083 210 584 All Rights Reserved">
<meta name="author" content="David Ireland, DI Management Services Pty Limited, Sydney, Australia www.di-mgt.com.au">

<meta http-equiv="content-language" content="en-us">
<meta http-equiv="content-style-type" content="text/css">
<link href="diprint.css" rel="stylesheet" type="text/css" media="handheld">
<link href="distyle3.css" rel="stylesheet" type="text/css" media="Screen">
<link href="diprint.css" rel="stylesheet" type="text/css" media="print">

<link href="comment.css" rel="stylesheet" type="text/css" media="Screen"> 
<meta http-equiv="Content-Script-Type" content="text/javascript">
<script src="comment.js" type="text/javascript"></script>

</head>

<body>
<!-- BEGIN HEADER-BLOCK -->
<div class="t-header">
	<div class="h-search">
<form method="get" action="http://www.di-mgt.com.au/cgi-bin/ks/ksearch.cgi">
	<div>
<input type="text" name="terms" value="" size="8" class="input-box">
<input type="submit" title="Do search" value="Search">
| <a href="sitemap.html" title="Sitemap for DI Management">Sitemap</a>	
	</div>
</form>
	</div>
	<div class="h-crumbs">
<a href="index.html">DI&nbsp;Management Home</a> &gt;
<!-- $CUSTOM$ -->
<a href="crypto.html">Cryptography</a> &gt;
Using Padding in Encryption
	</div>
</div> 
<!-- END HEADER-BLOCK -->

<!-- BEGIN BODY-BLOCK -->
<div class="w-body-text">
<h1>
	<img class="h-logo" width="151" height="33" src="images/dilogo.gif" 
	alt="DI Management Services is a computer programming consultancy based in Sydney, Australia"
	title="DI Management Services, Sydney, Australia">
Using Padding in Encryption</h1><!-- $CUSTOM$ -->
<hr class="noshow">

<!-- Body text begins -->

<h2>Introduction</h2>
<p>The most common query we get about cryptography concerns padding with a block cipher.
</p>
<p>
If you have to encrypt some data to send to another user and 
everything else works OK except the last few bytes, your problem is probably one of padding.
Read on.
</p>
<p>
This article describes the mechanics of padding with examples using common
block encryption algorithms like DES, Triple DES, Blowfish and AES.
It considers where you should use padding and where you 
don't need to. 
</p>

<a name="contents"></a>
<ul class="smaller">
<li><a href="#whatispadding">What is padding?</a></li>
<li><a href="#exampleecb">Example using DES in ECB mode</a></li>
<li><a href="#examplecbc">Example using Blowfish in CBC mode</a></li>
<li><a href="#aeslargerblocksize">What about ciphers like AES that use larger block sizes?</a></li>
<li><a href="#exampleaes">Example using AES</a></li>
<li><a href="#cfbofbmodes">Cipher-Feedback (CFB) and Output-Feedback (OFB) Modes</a></li>
<li><a href="#whennopadding">When don't I need to use padding?</a></li>
<li><a href="#example3des">Example using Triple DES without padding</a></li>
<li><a href="#randompadding">Using random padding</a></li>
<li><a href="#whenandwhennot">So when do I use padding and when don't I?</a></li>
<li><a href="#references">References</a></li>
<li><a href="#otherinfo">Other Information</a></li>

</ul>


<h2><a name="whatispadding"></a>What is padding?</h2>
<p>
Block cipher algorithms like DES and Blowfish in Electronic Code Book (ECB)
and Cipher Block Chaining (CBC) mode require their input to be an exact multiple
of the block size. 
If the plaintext to be encrypted is not an exact multiple, you need to pad before encrypting
by adding a <dfn>padding string</dfn>.
When decrypting, the receiving party needs to know how to remove the padding in an unambiguous manner.
</p>


<h2><a name="exampleecb"></a>Example using DES in ECB mode</h2>

The plain text is the ASCII code for
"<code>Now is the time for</code>".
We are encrypting using DES in ECB mode with the cryptographic key 
<code>0x0123456789ABCDEF</code>.
To encrypt, we break up the plaintext into blocks of 8 bytes 
(Note we are using 8 in this example because the block
size for DES is 64 bits or 8 bytes; if this were AES we'd be using 16 bytes).
<pre>
1234567812345678123
Now is the time for
</pre>
breaks up into
<pre>
|Now_is_t|he_time_|for?????|
|block 1-|block 2-|block 3-|
</pre>
In ECB mode, each 8-byte block is encrypted independently.
<br>&nbsp;<br>
First block:
<pre>
DES INPUT BLOCK  = N  o  w  _  i  s  _  t
(IN HEX)           4E 6F 77 20 69 73 20 74
KEY              = 01 23 45 67 89 AB CD EF
DES OUTPUT BLOCK = 3F A4 0E 8A 98 4D 43 15
</pre>
Second block:
<pre>
DES INPUT BLOCK  = h  e  _  t  i  m  e  _
(IN HEX)           68 65 20 74 69 6D 65 20
KEY              = 01 23 45 67 89 AB CD EF
DES OUTPUT BLOCK = 6A 27 17 87 AB 88 83 F9
</pre>

So far, so good. But what do we do with the odd characters at the end of our plaintext?

<pre>
DES INPUT BLOCK  = f  o  r  ?? ?? ?? ?? ??
(IN HEX)           66 6F 72 ?? ?? ?? ?? ??
</pre>

<p>We need to pad the block with padding bytes to make it up to the required length.
There are at least five common conventions:-
</p>
<ol>
<li>Pad with bytes all of the same value as the number of padding bytes</li>
<li>Pad with 0x80 followed by zero bytes</li>
<li>Pad with zeroes except make the last byte equal to the number of padding bytes</li>
<li>Pad with zero (null) characters</li>
<li>Pad with space characters</li>
</ol>
Method one is the method described in PKCS#5, PKCS#7 and RFC 3852 Section 6.3 (formerly RFC 3369 and RFC 2630).
It is the most commonly used, and the one we recommend in the absence of any other considerations.

<h3>Method 1 - Pad with bytes all of the same value as the number of padding bytes</h3>
This is the method recommended in <a href="#PKCS5">[PKCS5]</a>, <a href="#PKCS7">[PKCS7]</a>,
and <a href="#CMS">[CMS]</a>.
<p>Pad the input with a padding string of between 1 and 8 bytes to make the total 
length an exact multiple of 8 bytes. The value of each byte of the padding string 
is set to the number of bytes added - i.e. 8 bytes of value 0x08, 
7 bytes of value 0x07, ..., 2 bytes of 0x02, or one byte of value 0x01. 
</p>

Our fourth block is padded with 5 bytes of value 0x05:
<pre>
DES INPUT BLOCK  = f  o  r  _  _  _  _  _
(IN HEX)           66 6F 72 05 05 05 05 05
KEY              = 01 23 45 67 89 AB CD EF
DES OUTPUT BLOCK = FD 29 85 C9 E8 DF 41 40
</pre>

<p>After decrypting, read the last character decrypted and strip off that many bytes.</p>
<p>This method can be used with any plaintext, ASCII or binary. Don't forget
to check first that the number of characters to be stripped is between one and eight.
This also gives you an extra check that the decryption has been carried out correctly
(well, if its value is not between 1 and 8 you know for sure that is hasn't, but if it is,
it doesn't necessarily mean it has). As an additional check, check all of the padding bytes.
</p>

<h3>Method 2 - Pad with 0x80 followed by zero (null) bytes</h3>

<p>Add a single padding byte of value 0x80 and then pad the
balance with enough bytes of value zero to make the total length an exact multiple
of 8 bytes. If the single 0x80 byte makes the total length an exact multiple
then do not add any zero bytes. 
</p>

Our fourth block is padded with 0x80 followed by 4 bytes of value 0x00:
<pre>
DES INPUT BLOCK  = f  o  r  _  _  _  _  _
(IN HEX)           66 6F 72 80 00 00 00 00
KEY              = 01 23 45 67 89 AB CD EF
DES OUTPUT BLOCK = BE 62 5D 9F F3 C6 C8 40
</pre>

<p>After decrypting, strip off all trailing zero bytes and the 0x80 byte.</p>
<p>This method can be used with any plaintext, ASCII or binary. Again, you have a check 
for incorrect decryption if you don't find the expected padding bytes at the end.
Cryptographers who work with smart cards seem to prefer this method, see <a href="#RANK">[RANK]</a>.
It is recommended in NIST 800-38a <a href="#BCMO">[BCMO]</a>.
In their latest book <a href="#FERG">[FERG]</a>, Niels Ferguson and Bruce Schneier 
recommend either this method or method 1.
</p>

<h3>Method 3 - Pad with zeroes except make the last byte equal to the number of padding bytes</h3>
Our fourth block is padded with 4 null characters (0x00) followed by a byte
with value 0x05:
<pre>
DES INPUT BLOCK  = f  o  r  _  _  _  _  _
(IN HEX)           66 6f 72 00 00 00 00 05
KEY              = 01 23 45 67 89 AB CD EF
DES OUTPUT BLOCK = 91 19 2C 64 B5 5C 5D B8
</pre>
<p>This is a variant of method 1 described in <a href="#SCHN">[SCHN]</a>. 
The convention with this method is usually <i>always</i> to add a padding string, even
if the original plaintext was already an exact multiple of 8 bytes.
The final byte could therefore have a value between 0x01 and 0x08.
</p>
<p>After decrypting, read the last character decrypted and strip off that many bytes
(checking first that its value is between one and eight).</p>
<p>This method can be used with any plaintext, ASCII or binary.
</p>

<h3>Method 4 - Pad with zero (null) characters</h3>
Our fourth block is padded with 5 null characters (0x00):
<pre>
DES INPUT BLOCK  = f  o  r  _  _  _  _  _
(IN HEX)           66 6f 72 00 00 00 00 00
KEY              = 01 23 45 67 89 AB CD EF
DES OUTPUT BLOCK = 9E 14 FB 96 C5 FE EB 75
</pre>
<p>After decrypting, trim all null characters found at the end until
you find a non-null character.
You cannot use this method when the plaintext could contain a null value.
This is not a problem if you are dealing with ASCII text, but
would be if encrypting binary data like an EXE file.
</p>

<h3>Method 5 - Pad with spaces</h3>
Our fourth block is padded with 5 space characters (0x20):
<pre>
DES INPUT BLOCK  = f  o  r  _  _  _  _  _
(IN HEX)           66 6f 72 20 20 20 20 20
KEY              = 01 23 45 67 89 AB CD EF
DES OUTPUT BLOCK = E3 FF EC E5 21 1F 35 25
</pre>

You will find this method used in EDI applications where the plaintext 
is simple ASCII text and does not have trailing spaces at the end. 
The convention is usually that if the original
plaintext is already an exact multiple of eight, then no padding is added, 
otherwise the last block is padded with space characters up to the next multiple
of eight. See, for example, <a href="#NZEDI">[NZEDI]</a>
<p>After decrypting, just trim any trailing space characters, if any</p>


<p>
The resulting ciphertext from these five methods will be as follows:
</p>
<pre>
   |-- block 1 ---| |-- block 2 ---| |-- block 3 ---|
1. 3FA40E8A984D4315 6A271787AB8883F9 FD2985C9E8DF4140 
2. 3FA40E8A984D4315 6A271787AB8883F9 BE625D9FF3C6C840 
3. 3FA40E8A984D4315 6A271787AB8883F9 91192C64B55C5DB8 
4. 3FA40E8A984D4315 6A271787AB8883F9 9E14FB96C5FEEB75
5. 3FA40E8A984D4315 6A271787AB8883F9 E3FFECE5211F3525
</pre>
Note how different the last blocks are.


<h2><a name="examplecbc"></a>Example using Blowfish in CBC mode</h2>
<p>This example is from Eric Young's set of test vectors for Blowfish.
Note that the plaintext data includes a trailing null character (0x00) after 
the final space character (0x20).
</p>
<pre>
key[16]  = 0123456789ABCDEFF0E1D2C3B4A59687
iv[8]    = FEDCBA9876543210
data[29] = "7654321 Now is the time for " (includes trailing '\0')
data[29] = 37363534333231204E6F77206973207468652074696D6520666F722000

Method 1 PKCS#5/RFC3369 method
IN:  37363534333231204E6F77206973207468652074696D6520666F722000030303
OUT: 6B77B4D63006DEE605B156E27403979358DEB9E7154616D9749DECBEC05D264B
                                                     ^^^^^^^^^^^^^^^^
Method 2 Pad with 0x80 + nulls
IN:  37363534333231204E6F77206973207468652074696D6520666F722000800000
OUT: 6B77B4D63006DEE605B156E27403979358DEB9E7154616D9BB3F8B9254003C40
                                                     ^^^^^^^^^^^^^^^^
Method 3 Pad with nulls + # bytes
IN:  37363534333231204E6F77206973207468652074696D6520666F722000000003
OUT: 6B77B4D63006DEE605B156E27403979358DEB9E7154616D9A078DBB46155E4AC
                                                     ^^^^^^^^^^^^^^^^
Method 4 Pad with nulls (this is the method used in the test vectors)
IN:  37363534333231204E6F77206973207468652074696D6520666F722000000000
OUT: 6B77B4D63006DEE605B156E27403979358DEB9E7154616D959F1652BD5FF92CC
                                                     ^^^^^^^^^^^^^^^^
Method 5 Pad with spaces
IN:  37363534333231204E6F77206973207468652074696D6520666F722000202020
OUT: 6B77B4D63006DEE605B156E27403979358DEB9E7154616D9332223899980E694
                                                     ^^^^^^^^^^^^^^^^
</pre>
<p>Note that the last 8 bytes of ciphertext are all completely different.
For this example, because the plaintext contains trailing space characters and nulls, 
the padding in methods 4 and 5 cannot be removed unabiguously.
</p>

<h2><a name="aeslargerblocksize"></a>What about ciphers like AES that have larger block sizes?</h2>
<p>
More modern block ciphers like the Advanced Encryption Algorithm (AES) have larger block 
sizes than DES and Blowfish. All the arguments above still apply, except you should
replace the number 8 with the appropriate block size in <i>bytes</i>. For example, if using
AES with a 128-bit block, pad to the next multiple of 16. Note, too, that it is the <i>block</i>
size that matters, not the size of the key.
</p>
<a name="exampleaes"></a>
<h3>Example using AES</h3>
This example uses AES-128 to encrypt a short message "Hello" using the
128-bit key <code>0xA456B7A422C5145ABCF2B3CB206579A8</code>.
The block size of 128 bits is equal to 128/8 = 16 bytes, so
we need to pad our 5-byte plaintext with an 11-byte padding string.
The ASCII characters "Hello"  are 48656C6C6F in hexadecimal and
 11 decimal = 0x0B.
<pre>
Method 1 PKCS#7/RFC3369 method
AES INPUT BLOCK  = 48656C6C6F0B0B0B0B0B0B0B0B0B0B0B
AES OUTPUT BLOCK = 42FF63CC06D53DA93F24389723E1611A

Method 2 Pad with 0x80 + nulls
AES INPUT BLOCK  = 48656C6C6F8000000000000000000000
AES OUTPUT BLOCK = 97AFA1455DA9E2E1B821275997CF4DC5

Method 3 Pad with nulls + # bytes
AES INPUT BLOCK  = 48656C6C6F000000000000000000000B
AES OUTPUT BLOCK = 6024D07C11283639425E3A33D99F32BA

Method 4 Pad with nulls
AES INPUT BLOCK  = 48656C6C6F0000000000000000000000
AES OUTPUT BLOCK = 3FC6C30A64CD6E2970803871C7068998

Method 5 Pad with spaces
AES INPUT BLOCK  = 48656C6C6F2020202020202020202020
AES OUTPUT BLOCK = 7FB72E7BE929223D001E3129DFFA20A0
</pre>
Note that, in this instance where the message is shorter than the block size, the
resulting output is completely different in each case.


<h2><a name="cfbofbmodes"></a>Cipher-Feedback (CFB), Output-Feedback (OFB) and counter (CTR) modes</h2>
<p>
If you encrypt using Cipher-Feedback (CFB) or Output-Feedback (OFB) or counter (CTR) modes then 
the ciphertext will be the same size as the plaintext and so padding is not required. 
Be careful, though, when using these modes, because
the initialisation vectors (IV) should be unique. 
</p>
<p>
Similarly, encrypting using a stream cipher like RC4 or PC1 does not require padding.
</p>

<h2><a name="whennopadding"></a>When don't I need to use padding?</h2>

If your plaintext is <em>always</em> an exact multiple
of the block length <em>and</em> both the sender and recipient agree, 
then you don't need to use padding.


<h3><a name="example3des"></a>Example</h3>
<p>
You need to communicate a packet of information that is always the same format:-
</p>
<table summary="" class="data">
<tr style="font-weight: bold;"><td>Field</td><td>Length</td><td>Example</td></tr>
<tr><td>Customer reference number:</td><td>5 digits</td><td>12345</td></tr>
<tr><td>Credit card number:</td><td>15 digits</td><td>376066666655555</td></tr>
<tr><td>Expiry date:</td><td>4 digits</td><td>1205</td></tr>
<tr><td>Total:</td><td>24 digits</td><td>&nbsp;</td></tr>
</table>

<p>
This is always 24 bytes long, so if we are encrypting with DES or Triple DES or Blowfish,
 our data is always a fixed multiple of the block size.

There is no need to add any padding to this before encrypting,
provided that you and the recipient agree not to.
</p>

<p>
Example using Triple DES with key 
<code>0x0123456789ABCDEFFEDCBA987654321089ABCDEF01234567</code>
</p>

<pre>
ASCII PLAINTEXT:   123453760666666555551205
3DES INPUT BLOCKS: 12345376 06666665 55551205
INPUT IN HEX: 3132333435333736 3036363636363635 3535353531323035
3DES OUTPUT:  7ADE45981580DB32 421E3D90B5B47D5B 1175FA3DD8B932D7
</pre>




<h2><a name="randompadding"></a>Random padding</h2>
<p>
If you are transmitting messages that are shorter than the block length and encrypting
using ECB mode, your ciphertext will be identical for identical messages.
One solution is to use a variant of method 3 but use random padding bytes instead of nulls. 
</p>
<p>
Alternatively, if the size of your encrypted message might give some information away,
add a random number of random padding bytes to the message.
</p>

<h3><a name="randomidentical"></a>Using random padding with identical messages</h3>
Our plaintext message is frequently just "buy". If we encrypt using DES
in ECB mode
with the key <code>0xfedcba9876543210</code> using the RFC3369
method of padding we will always end up with the same result:
<pre>
ACSII PLAINTEXT: buy
(IN HEX):        627579
INPUT BLOCK:     6275790505050505
KEY:             FEDCBA9876543210
OUTPUT BLOCK:    C2666697D381CA11
</pre>
<p>
We could use a variant of our method 3 above using random padding bytes instead of
nulls. The final byte tells us how many bytes to strip after deciphering.
The following two examples use four random padding bytes plus 0x05 and produce
completely different results.
</p>
<pre>
ACSII PLAINTEXT: buy
(IN HEX):        627579
INPUT BLOCK:     62757958B3989B05
KEY:             FEDCBA9876543210
OUTPUT BLOCK:    061FF118B96F4EE8
</pre>
<pre>
ACSII PLAINTEXT: buy
(IN HEX):        627579
INPUT BLOCK:     62757934297CC805
KEY:             FEDCBA9876543210
OUTPUT BLOCK:    AAE42B7527A9078A
</pre>
<p>
A receiving party with the correct key could derive the original plaintext
from any such message. An attacker is now faced with solving many more
alternatives.
</p>
<p>Note that this will only work for a short message. You can achieve the same security
by using CBC mode with a unique Initialisation Vector (IV), 
but you then have the overhead of having to transmit the IV as well as the ciphertext.
</p>


<h3><a name="randomdisguise"></a>Using random padding to disguise the size of the message</h3>
<p>As a very contrived example, let's say we might be sending two alternative
messages that read:
</p>
<pre>
Offer $90000.00
OR
Offer $1000000.00
</pre>
Let's say we use the PKCS#5/RFC3369 method of padding when we encrypt these two messages
using Blowfish in CBC mode with 128-bit key 
<code>0x0123456789ABCDEFF0E1D2C3B4A59687</code>
and IV <code>0xFEDCBA9876543210</code>.
<pre>
ASCII PT: Offer $90000.00
(IN HEX): 4F66666572202439303030302E3030
INPUT:    4F66666572202439303030302E303001
OUTPUT:   33BEF550BADE4798DDA5C960E2C70EB9
</pre>
<pre>
ASCII PT: Offer $1000000.00
(IN HEX): 4F666665722024313030303030302E3030
INPUT:    4F666665722024313030303030302E303007070707070707
OUTPUT:   A4B8D1BF3020DB24CDD459BAB6A7BA7B02AC39EE7C1BF090
</pre>
<p>An eavesdropper who knows that the message may contain either $90,000
or $1,000,000 could work out the answer just from the length of the ciphertext.
</p>
<p>One solution is to add a random number of random bytes as padding, and to
indicate the number of random bytes added by the last byte in padded input
block. 
</p>
<pre>
ASCII PT: Offer $90000.00
(IN HEX): 4F66666572202439303030302E3030
INPUT:    4F66666572202439303030302E303012441C0D5E2C60147DF54910B6A6445311
OUTPUT:   33BEF550BADE4798B164164E571A5266B0D488FAD934D6386494FAF528C8ED82
</pre>
<pre>
ASCII PT: Offer $1000000.00
(IN HEX): 4F666665722024313030303030302E3030
INPUT:    4F666665722024313030303030302E3030CEF8302A84BA07
OUTPUT:   A4B8D1BF3020DB24CDD459BAB6A7BA7BC01DF3FCC3B7DC1B
</pre>
<p>
This particular convention of using only the last byte limits you to 255 random padding bytes.
It may be more practical to encode your plaintext with a header that indicates the number 
of valid bytes that follow plus a much larger random number of random padding bytes 
and then encrypt that.
</p>


<h2><a name="whenandwhennot"></a>So when do I use padding and when don't I?</h2>
<ul>
<li>As a general rule, if you as a programmer need to encrypt data of variable length
that you can't control, use padding with CBC mode. 
To avoid any ambiguity, make it standard practice <i>always</i> to add
padding.
<br>&nbsp;<br></li>
<li>If your plaintext data is always a fixed length, you can avoid using padding. 
<br>&nbsp;<br></li>
<li>If you use 
CFB or OFB modes of encryption, 
or use a stream cipher like RC4 or PC1, then you don't use padding.</li>
</ul>
Note that Bruce Schneier in <a href="#SCHN">[SCHN]</a> recommends that best way to encrypt files is generally to
use the CBC mode of enciphering - see section 9.11. 
In their more recent book <a href="#FERG">[FERG]</a>, 
Ferguson and Schneier prefer the counter (CTR) mode.



<h2><a name="references"></a>References</h2>
<ul>

<li><b><a name="BCMO">[BCMO]</a></b>
NIST Special Publication 800-38A
<cite>Recommendations for Block Cipher Modes of Operation,
Methods and Techniques</cite>, Morris Dworkin, December 2001.
</li>

<li><b><a name="CMS">[CMS]</a></b>
RFC 3852 <cite>Cryptographic Message Syntax (CMS)</cite>,
R. Housley, July 2004 (obsoletes RFC 3369 and RFC 2630).
</li>

<li><b><a name="FERG">[FERG]</a></b>
Niels Ferguson and Bruce Schneier,
<cite>Practical Cryptography</cite>,
John Wiley, 2003.
</li>

<li><b><a name="FIPS46">[FIPS46]</a></b>
Federal Information Processing Standard (FIPS) 46-3,
<cite>Data Encryption Standard (DES)</cite>,
U.S. Department Of Commerce/National Institute of Standards and Technology,
25 October 1999.
</li>

<li><b><a name="FIPS74">[FIPS74]</a></b>
Federal Information Processing Standard 74 (FIPS PUB 74),
<cite>Guidelines for Implementing and Using the NBS Data Encryption Standard</cite>,
U.S. Department Of Commerce/National Institute of Standards and Technology,
1 April 1981.
</li>

<li><b><a name="FIPS81">[FIPS81]</a></b>
Federal Information Processing Standard (FIPS 81),
<cite>DES Modes of Operation</cite>,
U.S. Department Of Commerce/National Institute of Standards and Technology,
2 December 1980.
</li>

<li><b><a name="FIPS197">[FIPS197]</a></b>
Federal Information Processing Standards Publication
FIPS PUB 197 <cite>Advanced Encryption Standard (AES)</cite>,
U.S. Department Of Commerce/National Institute of Standards and Technology,
26 November 2001.
</li>

<li><b><a name="MENE">[MENE]</a></b>
 Menezes, van Oorschot and Vanstone,
<cite>Handbook of Applied Cryptography</cite>,
CRC Press LLC, 1997.
</li>

<li><b><a name="NZEDI">[NZEDI]</a></b>
New Zealand Customs Service,
<cite>EDI Message Implementation Guidelines for Customs Declarations</cite>,
15 November 1999.
</li>

<li><b><a name="PKCS5">[PKCS5]</a></b>
PKCS #5,
<cite>Password-Based Encryption Standard</cite>,
RSA Laboratories, Version 2.0, March 1999.
</li>

<li><b><a name="PKCS7">[PKCS7]</a></b>
PKCS #5,
<cite>Cryptographic Message Syntax Standard</cite>,
RSA Laboratories, Version 1.5, November 1993.
</li>

<li><b><a name="RANK">[RANK]</a></b>
Rankl, W and W. Effing,
<cite>Smart Card Handbook</cite>,
John Wiley, 1997.
</li>

<li><b><a name="SCHN">[SCHN]</a></b>
Bruce Schneier,
<cite>Applied Cryptography - Protocols, Algorithms and Source Code in C</cite>,
second edition, John Wiley, 1996.
</li>

<li><b><a name="STAL">[STAL]</a></b>
William Stallings,
<cite>Cryptography and Network Security: Principles and Practice</cite>,
2nd edition, Prentice Hall 1998, ISBN 0138690170
(3rd edition 2002, ISBN 0130914290).
</li>

<li><b><a name="TMOVS">[TMOVS]</a></b>
 NIST Special Publication 800-20
<cite>Modes of Operation Validation System for the Triple Data
Encryption Algorithm (TMOVS): Requirements and Procedures</cite>, April 2000.
</li>
</ul>


<h3><a name="otherinfo"></a>Other Information</h3>
<ul>
<li><a href="cryptokeys.html">An introduction to using keys in cryptography</a>.</li>
<li><a href="cryptoCipherText.html">Ciphertext is not text! - Storing and representing ciphertext</a>.</li>
<li><a href="cryptoCrossPlatform.html">Cross-platform encryption</a>.</li>
<li><a href="cryptoInternational.html">Encryption with international character sets</a>.</li>
<li><a href="properpassword.html">Encrypting variable-length strings with a password</a>.</li>
</ul>	


<!-- End of main body text -->

<h2><a name="contact"></a>Contact</h2>
<p>
For more information, please <a href="http://www.di-mgt.com.au/contactmsg.php">Email Us</a>.
To comment on this page, see <a href="#makeacomment">below</a>.
</p>

<p><i>This page last updated 3 January 2010</i></p><!-- $CUSTOM$ -->

<div id="comments" class="comments">
<h2><a name="makeacomment"></a>Comments</h2>

<div><a href="comment_form.php?id=10078123" onclick="openCommentWindow('comment_form.php?id=10078123'); return false;">Post 
	a comment</a> on this page.
<noscript><div class="warn"> (JavaScript is disabled in your browser: some features on the comment page will not work.)</div>
</noscript>	
</div>

<!-- BEGIN COMMENTS-CONTENT -->
<p><strong>0</strong> comments so far</p>

<!-- END COMMENTS-CONTENT -->
</div>

</div> <!-- END BODY-BLOCK -->

<!-- BEGIN FOOTER-BLOCK -->
<!-- Page footer - Rule, Copyright and Text-style Links -->
<hr class="noshow">
<div class="w-footer">
<!-- Show off valid WC3 -->
<div id="w3c" class="f-w3c">
<a href="http://validator.w3.org/check?uri=www.di-mgt.com.au/cryptopad.html"><!-- $CUSTOM$ -->
<img width="88" height="31" alt="Valid HTML 4.01 Strict" src="images/valid-html401.gif"></a>
<a href="http://jigsaw.w3.org/css-validator/validator?uri=http://www.di-mgt.com.au/cryptopad.html"><!-- $CUSTOM$ -->
<img width="88" height="31" alt="Valid CSS" src="images/w3c-vcss.gif"></a>
</div>
<!-- end of Valid WC3 -->

<div class="f-copyright"><!-- $CUSTOM$ -->
	Copyright &copy; 2003-10 DI Management Services Pty Limited 
	ABN&nbsp;78&nbsp;083&nbsp;210&nbsp;584
	Sydney, Australia.<br>

	<a class="links" href="http://www.di-mgt.com.au">
<b>www.di-mgt.com.au</b></a>.
	All rights reserved.
</div>                                             
<!-- Text-style links -->
<p class="footer-links">

	<a class="links" href="index.html" >Home</a> |
	<a class="links" href="services.html" >Services</a> |
	<a class="links" href="profile.html" >About Us</a> |
	<a class="links" href="projects.html" >Projects</a> |
	<a class="links" href="links.html" >Links</a> |
	<a class="links" href="crypto.html" >Cryptography</a> |
	<a class="links" href="http://www.cryptosys.net/" >CryptoSys API</a> |
	<a class="links" href="http://www.cryptosys.net/pki/" >CryptoSys PKI</a> |
	<a class="links" href="dbxanalyzer/index.html" >DBXanalyzer</a> |
	<a class="links" href="bigdigits.html" > BigDigits</a> |
	<a class="links" href="wclock/index.html">Wclock</a> |
	<a class="links" href="sudoku.html">Su Doku</a> |
	<a class="links" href="site.html" >About This Site</a> |
	<a class="links" href="contact.html" >Contact</a> |
	<a class="links" href="http://www.di-mgt.com.au/contactmsg.php">Email Us</a>
</p>
</div> <!-- END FOOTER-BLOCK -->

</body></html>
